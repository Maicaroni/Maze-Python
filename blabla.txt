function rand(max) {
  return Math.floor(Math.random() * max);
}

function shuffle(a) {
  for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

function displayVictoryMess(moves) {
  document.getElementById("moves").innerHTML = "You Moved " + moves + " Steps.";
  toggleVisibility("Message-Container");
}

function toggleVisibility(id) {
  const element = document.getElementById(id);
  element.style.visibility = (element.style.visibility === "visible") ? "hidden" : "visible";
}

function Maze(Width, Height) {
  var mazeMap;
  var width = Width;
  var height = Height;
  var startCoord, endCoord;
  var dirs = ["n", "s", "e", "w"];
  var modDir = {
      n: { y: -1, x: 0, o: "s" },
      s: { y: 1, x: 0, o: "n" },
      e: { y: 0, x: 1, o: "w" },
      w: { y: 0, x: -1, o: "e" }
  };

  this.map = function () {
      return mazeMap;
  };
  this.startCoord = function () {
      return startCoord;
  };
  this.endCoord = function () {
      return endCoord;
  };

  function genMap() {
      mazeMap = Array.from({ length: height }, () => Array.from({ length: width }, () => ({
          n: false, s: false, e: false, w: false, visited: false, priorPos: null
      })));
  }

  function defineMaze() {
      var isComp = false;
      var move = false;
      var cellsVisited = 1;
      var numLoops = 0;
      var maxLoops = 0;
      var pos = { x: 0, y: 0 };
      var numCells = width * height;

      while (!isComp) {
          move = false;
          mazeMap[pos.x][pos.y].visited = true;

          if (numLoops >= maxLoops) {
              shuffle(dirs);
              maxLoops = Math.round(rand(height / 8));
              numLoops = 0;
          }
          numLoops++;

          for (let index = 0; index < dirs.length; index++) {
              var direction = dirs[index];
              var nx = pos.x + modDir[direction].x;
              var ny = pos.y + modDir[direction].y;

              if (nx >= 0 && nx < width && ny >= 0 && ny < height && !mazeMap[nx][ny].visited) {
                  mazeMap[pos.x][pos.y][direction] = true;
                  mazeMap[nx][ny][modDir[direction].o] = true;
                  mazeMap[nx][ny].priorPos = pos;
                  pos = { x: nx, y: ny };
                  cellsVisited++;
                  move = true;
                  break;
              }
          }

          if (!move) {
              pos = mazeMap[pos.x][pos.y].priorPos;
          }
          if (numCells === cellsVisited) {
              isComp = true;
          }
      }
  }

  function defineStartEnd() {
      switch (rand(4)) {
          case 0:
              startCoord = { x: 0, y: 0 };
              endCoord = { x: height - 1, y: width - 1 };
              break;
          case 1:
              startCoord = { x: 0, y: width - 1 };
              endCoord = { x: height - 1, y: 0 };
              break;
          case 2:
              startCoord = { x: height - 1, y: 0 };
              endCoord = { x: 0, y: width - 1 };
              break;
          case 3:
              startCoord = { x: height - 1, y: width - 1 };
              endCoord = { x: 0, y: 0 };
              break;
      }
  }

  genMap();
  defineStartEnd();
  defineMaze();
}

function DrawMaze(Maze, ctx, cellsize, endSprite = null) {
  var map = Maze.map();
  var cellSize = cellsize;
  var drawEndMethod;

  this.redrawMaze = function (size) {
      cellSize = size;
      ctx.lineWidth = cellSize / 50;
      drawMap();
      drawEndMethod();
      drawEndSprite();
  };

  function drawCell(xCord, yCord, cell) {
      var x = xCord * cellSize;
      var y = yCord * cellSize;

      if (cell.n === false) {
          ctx.beginPath();
          ctx.moveTo(x, y);
          ctx.lineTo(x + cellSize, y);
          ctx.stroke();
      }
      if (cell.s === false) {
          ctx.beginPath();
          ctx.moveTo(x, y + cellSize);
          ctx.lineTo(x + cellSize, y + cellSize);
          ctx.stroke();
      }
      if (cell.e === false) {
          ctx.beginPath();
          ctx.moveTo(x + cellSize, y);
          ctx.lineTo(x + cellSize, y + cellSize);
          ctx.stroke();
      }
      if (cell.w === false) {
          ctx.beginPath();
          ctx.moveTo(x, y);
          ctx.lineTo(x, y + cellSize);
          ctx.stroke();
      }
  }

  function drawMap() {
      for (let x = 0; x < map.length; x++) {
          for (let y = 0; y < map[x].length; y++) {
              drawCell(x, y, map[x][y]);
          }
      }
  }

  function drawEndFlag() {
      var coord = Maze.endCoord();
      var gridSize = 4;
      var fraction = cellSize / gridSize - 2;
      var colorSwap = true;
      for (let y = 0; y < gridSize; y++) {
          if (gridSize % 2 === 0) {
              colorSwap = !colorSwap;
          }
          for (let x = 0; x < gridSize; x++) {
              ctx.beginPath();
              ctx.rect(
                  coord.x * cellSize + x * fraction + 4.5,
                  coord.y * cellSize + y * fraction + 4.5,
                  fraction,
                  fraction
              );
              if (colorSwap) {
                  ctx.fillStyle = "rgba(0, 0, 0, 0.8)";
              } else {
                  ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
              }
              ctx.fill();
              colorSwap = !colorSwap;
          }
      }
  }

  function drawEndSprite() {
      var offsetLeft = cellSize / 50;
      var offsetRight = cellSize / 25;
      var coord = Maze.endCoord();
      ctx.drawImage(
          finishSprite, // Use finishSprite here instead of sprite
          0,
          0,
          finishSprite.width,
          finishSprite.height,
          coord.x * cellSize + offsetLeft,
          coord.y * cellSize + offsetLeft,
          cellSize - offsetRight,
          cellSize - offsetRight
      );
  }

  function clear() {
      var canvasSize = cellSize * map.length;
      ctx.clearRect(0, 0, canvasSize, canvasSize);
  }

  if (endSprite !== null) {
      drawEndMethod = drawEndSprite;
  } else {
      drawEndMethod = drawEndFlag;
  }
  clear();
  drawMap();
  drawEndMethod();
}

function Player(maze, c, _cellsize, onComplete, sprite = null) {
  var ctx = c.getContext("2d");
  var drawSprite;
  var moves = 0;
  drawSprite = sprite ? drawSpriteImg : drawSpriteCircle;
  if (sprite !== null) {
      drawSprite = drawSpriteImg;
  }
  var player = this;
  var cellCoords = {
      x: maze.startCoord().x,
      y: maze.startCoord().y
  };
  var map = maze.map();
  var cellSize = _cellsize;
  var halfCellSize = cellSize / 2;

  this.cellCoords = cellCoords; // Add this line to make cellCoords accessible

  this.redrawPlayer = function (_cellsize) {
      cellSize = _cellsize;
      drawSprite(cellCoords); // Draw the player at the updated coordinates
  };

  function drawSpriteCircle(coord) {
      ctx.beginPath();
      ctx.fillStyle = "yellow";
      ctx.arc(
          (coord.x + 1) * cellSize - halfCellSize,
          (coord.y + 1) * cellSize - halfCellSize,
          halfCellSize - 2,
          0,
          2 * Math.PI
      );
      ctx.fill();
      if (coord.x === maze.endCoord().x && coord.y === maze.endCoord().y) {
          onComplete(moves);
          player.unbindKeyDown();
      }
  }

  function drawSpriteImg(coord) {
      if (!sprite || !sprite.complete) {
          console.log('Sprite not yet loaded');
          return;
      }
      let offsetLeft = cellSize / 50;
      let offsetRight = cellSize / 25;
      ctx.drawImage(
          sprite,
          0,
          0,
          sprite.width,
          sprite.height,
          coord.x * cellSize + offsetLeft,
          coord.y * cellSize + offsetLeft,
          cellSize - offsetRight,
          cellSize - offsetRight
      );
  }

  function removeSprite(coord, cellSize, ctx) {
      let offsetLeft = cellSize / 50;
      let offsetRight = cellSize / 25;
      ctx.clearRect(
          coord.x * cellSize + offsetLeft,
          coord.y * cellSize + offsetLeft,
          cellSize - offsetRight,
          cellSize - offsetRight
      );
  }

  function check(e) {
    
}

  this.bindKeyDown = function () {

  };

  this.unbindKeyDown = function () {

  };

  drawSprite(maze.startCoord());
  this.bindKeyDown();
}

var mazeCanvas = document.getElementById("mazeCanvas");
var ctx = mazeCanvas.getContext("2d");
var sprite;
var finishSprite;
var maze, draw, player;
var cellSize;
var difficulty;

window.onload = function () {
  let viewWidth = $("#view").width();
  let viewHeight = $("#view").height();
  if (viewHeight < viewWidth) {
      ctx.canvas.width = viewHeight - viewHeight / 100;
      ctx.canvas.height = viewHeight - viewHeight / 100;
  } else {
      ctx.canvas.width = viewWidth - viewWidth / 100;
      ctx.canvas.height = viewWidth - viewWidth / 100;
  }

  // Call makeMaze when the page loads
  makeMaze();

  // Add the event listener to the textarea element
  document.getElementById('terminal').addEventListener('click', function () {
      console.log('Textarea clicked!');
      this.focus();
  });

  document.getElementById("startMazeBtn").addEventListener("click", makeMaze);

  //Load and edit sprites
  var completeOne = false;
  var completeTwo = false;
  var isComplete = () => {
      if (completeOne === true && completeTwo === true) {
          makeMaze();
      }
  };

  sprite = new Image();
  sprite.src = "./key.png";
  sprite.onload = function () {
      console.log('Sprite (key.png) loaded successfully');
      console.log('Image dimensions:', this.width, 'x', this.height);
      completeOne = true;
      isComplete();
  };
  sprite.onerror = function (e) {
      console.error('Failed to load sprite image (key.png)');
      console.error('Error details:', e);
  };

  finishSprite = new Image();
  finishSprite.src = "./home.png";
  finishSprite.onload = function () {
      console.log('Finish sprite (home.png) loaded successfully');
      console.log('Image dimensions:', this.width, 'x', this.height);
      completeTwo = true;
      isComplete();
  };
  finishSprite.onerror = function (e) {
      console.error('Failed to load finish sprite (home.png)');
      console.error('Error details:', e);
  };
}

window.onresize = function () {
  let viewWidth = $("#view").width();
  let viewHeight = $("#view").height();
  if (viewHeight < viewWidth) {
      ctx.canvas.width = viewHeight - viewHeight / 100;
      ctx.canvas.height = viewHeight - viewHeight / 100;
  } else {
      ctx.canvas.width = viewWidth - viewWidth / 100;
      ctx.canvas.height = viewWidth - viewWidth / 100;
  }
  cellSize = mazeCanvas.width / maze.map().length;
  if (player != null) {
      draw.redrawMaze(cellSize);
      player.redrawPlayer(cellSize);
  }
}

function makeMaze() {
  if (player) {
      player.unbindKeyDown();
      player = null;
  }

  var e = document.getElementById("diffSelect");
  difficulty = e.options[e.selectedIndex].value;
  cellSize = mazeCanvas.width / difficulty;
  maze = new Maze(difficulty, difficulty);
  draw = new DrawMaze(maze, ctx, cellSize, finishSprite);
  player = new Player(maze, mazeCanvas, cellSize, displayVictoryMess, sprite);

  player.cellCoords = {
      x: maze.startCoord().x,
      y: maze.startCoord().y
  };

  // Add the event listener to the textarea element
  if (document.getElementById("mazeContainer").style.opacity < "100") {
      document.getElementById("mazeContainer").style.opacity = "100";
  }
}

// Get the terminal element
const terminal = document.getElementById('terminal');

// Function to append text to the terminal
function appendToTerminal(text) {
    if (terminal.value !== '' && !terminal.value.endsWith('\n')) {
        terminal.value += '\n';
    }
    terminal.value += text + '\n';
    console.log("Command appended:", text);
    terminal.scrollTop = terminal.scrollHeight; // Auto-scroll to the bottom
}

// Function to add event listener only once
function addEventListenerOnce(element, event, fn) {
    element.removeEventListener(event, fn);
    element.addEventListener(event, fn);
}

// Button event listeners
const buttons = [
    { id: 'ifButton', text: 'if (isPathOpen()) {' },
    { id: 'pathOpenButton', text: 'if (isPathOpen()) {' },
    { id: 'pathCloseButton', text: 'if (!isPathOpen()) {' },
    { id: 'moveUpButton', text: 'moveUp();' },
    { id: 'moveDownButton', text: 'moveDown();' },
    { id: 'moveLeftButton', text: 'moveLeft();' },
    { id: 'moveRightButton', text: 'moveRight();' },
    { id: 'elseButton', text: '} else {' }
];

buttons.forEach(button => {
    addEventListenerOnce(document.getElementById(button.id), 'click', (e) => {
        e.preventDefault(); // Prevent any default behavior
        appendToTerminal(button.text);
    });
});

// Get the Enter button element
const enterButton = document.getElementById('enterButton');

// Add event listener to the Enter button
addEventListenerOnce(enterButton, 'click', (e) => {
    e.preventDefault(); // Prevent any default behavior
    const commands = getTerminalCommands(); // Get commands from the terminal
    executeCommands(commands); // Execute the commands
    terminal.value = ''; // Clear the terminal after executing commands
});

// Function to retrieve commands from the terminal
function getTerminalCommands() {
    return terminal.value.split('\n').filter(cmd => cmd.trim() !== ''); // Split by new line and filter empty lines
}

// Function to execute commands
function executeCommands(commands) {
    console.log("Commands received:", commands);
    let blockStack = [true]; // Stack to keep track of nested blocks

    commands.forEach(command => {
        command = command.trim();
        console.log(`Executing command: ${command}`);

        if (command.startsWith('if (')) {
            let condition = command.slice(3, -3).trim(); // Remove 'if (' and ') {'
            let shouldExecute = evaluateCondition(condition) && blockStack[blockStack.length - 1];
            blockStack.push(shouldExecute);
        } else if (command === '} else {') {
            blockStack[blockStack.length - 1] = !blockStack[blockStack.length - 1] && blockStack[blockStack.length - 2];
        } else if (command === '}') {
            blockStack.pop();
        } else if (blockStack[blockStack.length - 1]) {
            executeMovement(command);
        }
    });

    // Redraw the maze and player after processing all commands
    update();
}

function evaluateCondition(condition) {
    if (condition === 'isPathOpen()') {
        let currentCell = maze.map()[player.cellCoords.y][player.cellCoords.x];
        return currentCell.n || currentCell.s || currentCell.e || currentCell.w;
    } else if (condition === '!isPathOpen()') {
        let currentCell = maze.map()[player.cellCoords.y][player.cellCoords.x];
        return !(currentCell.n || currentCell.s || currentCell.e || currentCell.w);
    }
    return false;
}

function executeMovement(command) {
    switch (command) {
        case 'moveUp();':
            playerMove('up');
            break;
        case 'moveDown();':
            playerMove('down');
            break;
        case 'moveLeft();':
            playerMove('left');
            break;
        case 'moveRight();':
            playerMove('right');
            break;
        default:
            console.log(`Invalid command: ${command}`);
    }
}

function playerMove(direction) {
    console.log("playerMove called with direction:", direction);
    let newX = player.cellCoords.x;
    let newY = player.cellCoords.y;
    let map = maze.map();
    let currentCell = map[newY][newX];

    switch (direction) {
        case 'up':
            if (currentCell.n) newY--;
            break;
        case 'down':
            if (currentCell.s) newY++;
            break;
        case 'left':
            if (currentCell.w) newX--;
            break;
        case 'right':
            if (currentCell.e) newX++;
            break;
    }

    console.log("New coordinates:", newX, newY);

    if (newX >= 0 && newY >= 0 && newX < map[0].length && newY < map.length) {
        player.cellCoords = { x: newX, y: newY };
        console.log("Player coordinates updated:", player.cellCoords);
    } else {
        console.log("Move not allowed: out of bounds or wall");
    }
}

// Function to update the sprite's position on the screen
function update() {
  ctx.clearRect(0, 0, mazeCanvas.width, mazeCanvas.height);
  draw.redrawMaze(cellSize);
  player.redrawPlayer(cellSize);
}
